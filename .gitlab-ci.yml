include:
  - component: $CI_SERVER_FQDN/biru/project-components/merge-branches@0.0.16
    inputs:
      dev-branch: main
      token: $DEV_TOKEN
  - component: $CI_SERVER_FQDN/biru/project-components/build-deploy@0.0.16
    inputs:
      project-name: tenzu
      application-name: api
      dockerfile: buildrun/docker/tenzu/Dockerfile
      target: production-image
  - component: $CI_SERVER_FQDN/biru/project-components/release@0.0.16
    inputs:
      token: $DEV_TOKEN
  - component: $CI_SERVER_FQDN/biru/component/push@v1.9.1
    inputs:
      repo: github.com/BIRU-Scop/tenzu-back.git
      fetch-args: "origin --no-tags"
  - component: $CI_SERVER_FQDN/biru/component/push@v1.9.1
    inputs:
      repo: github.com/BIRU-Scop/tenzu-back.git
      job-name: mirror-demo-tags
      push-args: "origin HEAD:refs/tags/$CI_COMMIT_REF_SLUG"
      fetch-args: "origin --no-tags"
      rules:
        - if: $CI_COMMIT_TAG =~ /^.*-demo.*/
  # add test build image
  - component: $CI_SERVER_FQDN/biru/component/build-and-push@v1.7.1
    inputs:
      stage: build
      context: ${CI_PROJECT_DIR}
      dockerfile: ${CI_PROJECT_DIR}/buildrun/docker/tenzu/Dockerfile
      target: dev-image
      prefix: test-
      destination: ${CI_REGISTRY_IMAGE}/test:${CI_COMMIT_REF_SLUG}
      rules:
        - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_SLUG == $CI_DEFAULT_BRANCH'
          changes:
            - "buildrun/docker/tenzu/Dockerfile"
            - "buildrun/docker/tenzu/requirements/devel.txt"

stages:
  - build
  - test
  - release
  - build-deploy
  - mirror
  - merge


launch-demo-deploy:
  stage: merge
  variables:
    GIT_STRATEGY: none
    GIT_DISCOVERY_ACROSS_FILESYSTEM: 1
  needs:
    - job: get-released-tag
    - job: build-image-and-push
  before_script:
    - git clone https://oauth2:$DEPLOY_TOKEN@${CI_SERVER_HOST}/biru/sre/argocd -b main
    - cd argocd
    - git config --local user.email "bot@biru.sh"
    - git config --local user.name "Bot Biru"
    - git fetch --all
  script:
    # construct the values path with the inputs value
    - PROJECT_NAME="tenzu"
    - APP_NAME="api"
    - ENV_NAME="demo"
    - VALUES_FOLDER="values"
    - FILE="$VALUES_FOLDER/$PROJECT_NAME/$APP_NAME/values-$ENV_NAME.yaml"
    - echo $FILE $VALUE $NEXT_VERSION
    - yq -i ".image.tag=\"$NEXT_VERSION\"" "$FILE"
    - git add $FILE
    - git commit -m "deploy($PROJECT_NAME/$APP_NAME) $NEXT_VERSION on $ENV_NAME"
    - git push origin HEAD:main
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" && $CI_COMMIT_MESSAGE =~ /^chore\(release\).*-.*/ '
      when: manual
  environment:
    name: demo

publish-demo-tag:
  stage: merge
  needs:
    - job: get-released-tag
    - job: build-image-and-push
    - job: launch-demo-deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging" && $CI_COMMIT_MESSAGE =~ /^chore\(release\).*-.*/ '
  before_script:
    - git config --global user.email "bot@biru.sh"
    - git config --global user.name "${CI_PROJECT_TITLE}-bot"
    - git remote set-url origin https://oauth2:$DEV_TOKEN@${CI_SERVER_HOST}/${CI_PROJECT_PATH}
    - git fetch
  script:
    - DEMO_TAG="${NEXT_VERSION//staging/demo}"
    - echo $DEMO_TAG
    - git push origin HEAD:refs/tags/$DEMO_TAG

test:
  stage: test
  image:
    name: ${CI_REGISTRY_IMAGE}/test:${CI_COMMIT_REF_SLUG}
    pull_policy: [ always, if-not-present ]
  services:
    - name: postgres:17
      alias: db
  variables:
    # Postgres service config
    POSTGRES_DB: tenzu
    POSTGRES_USER: tenzu
    POSTGRES_PASSWORD: tenzu
    POSTGRES_HOST_AUTH_METHOD: trust
    # Tenzu configuration
    TENZU_DEBUG: True
    TENZU_DB__NAME: "tenzu"
    TENZU_DB__USER: "tenzu"
    TENZU_DB__PASSWORD: "tenzu"
    TENZU_DB__HOST: "db"
    TENZU_SECRET_KEY: secret
    TENZU_TOKENS__SIGNING_KEY: secret2
  script:
    - cd $CI_PROJECT_DIR/src/
    - pytest . --cov --cov-report=xml:coverage-report.xml  --cov-report=term --no-cov-on-fail --junitxml=pytest-report.xml --cov-config=.coveragerc
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      junit: $CI_PROJECT_DIR/src/pytest-report.xml
      coverage_report:
        coverage_format: cobertura
        path: $CI_PROJECT_DIR/src/coverage-report.xml
  rules:
    - if: '$CI_COMMIT_REF_SLUG == $CI_DEFAULT_BRANCH'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'
check_migration:
  stage: test
  image:
    name: ${CI_REGISTRY_IMAGE}/test:${CI_COMMIT_REF_SLUG}
    pull_policy: [ always, if-not-present ]
  variables:
    # Tenzu configuration
    TENZU_DEBUG: True
    TENZU_DB__NAME: "tenzu"
    TENZU_DB__USER: "tenzu"
    TENZU_DB__PASSWORD: "tenzu"
    TENZU_DB__HOST: "db"
    TENZU_SECRET_KEY: secret
    TENZU_TOKENS__SIGNING_KEY: secret2
  script:
    - cd $CI_PROJECT_DIR/src/
    - python manage.py makemigrations --check
  rules:
    - if: '$CI_COMMIT_REF_SLUG == $CI_DEFAULT_BRANCH'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'

